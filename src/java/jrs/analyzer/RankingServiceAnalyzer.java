/*
 * RankingServiceAnalyzer.java
 *
 */

package jrs.analyzer;

import java.util.*;
import javax.swing.*;
import javax.swing.SwingUtilities;
import javax.swing.table.*;
import jrs.*;

/** A tool for analyzing the RankingService. It is intended to be used to 
  * tune the system settings and to verify that the ranking algorithm is
  * reasonable.
  * 
  * @author Derek Hilder
  */
public class RankingServiceAnalyzer extends JFrame implements RankingServiceListener {

    private static int nextPlayerId = 0;
    
    // Map<RankingService, SimulationReport>
    private HashMap reports = new HashMap();
    

    /** Creates new form RankingServiceAnalyzer */
    public RankingServiceAnalyzer() {
        initComponents();
        nextPlayerId = playersTable.getRowCount()+1;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        updateStrategyButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        defaultRatingDeviationTF = new javax.swing.JTextField();
        defaultRatingTF = new javax.swing.JTextField();
        defaultRatingVolatilityTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        systemConstantTF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        performanceVarianceTF = new javax.swing.JTextField();
        downweightCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        numPlayersTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        aveNumGamesTF = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        numPeriodsTF = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        maxPlayersPerTeamTF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        maxPlayersPerGameTF = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        perSecondUpdateCB = new javax.swing.JRadioButton();
        perSecondUpdateTF = new javax.swing.JTextField();
        secondsLabel = new javax.swing.JLabel();
        perGameUpdateCB = new javax.swing.JRadioButton();
        perGameUpdateTF = new javax.swing.JTextField();
        gamesLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        playersTable = new javax.swing.JTable();
        addPlayerButton = new javax.swing.JButton();
        removePlayerButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gamesTable = new javax.swing.JTable();
        addGameButton = new javax.swing.JButton();
        removeGameButton = new javax.swing.JButton();
        runCustomSimulationButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("System Parameters"));
        jLabel3.setText("Initial player rating:");
        jLabel3.setToolTipText("The Rating assigned to new players.");

        jLabel4.setText("Initial player rating deviation:");
        jLabel4.setToolTipText("The Rating Deviation assigned to new players.");

        jLabel5.setText("Initial player rating volatility:");
        jLabel5.setToolTipText("<html>\nThe rating volatility assigned to new players.<br>\nThe volatility measure indicates the degree of expected<br>\nfluctuation in a player's rating. It is high when a player's<br>\nperformance is erratic, and low when it is consistent.\n</html>");

        defaultRatingDeviationTF.setText("350");
        defaultRatingDeviationTF.setToolTipText("The Rating Deviation assigned to new players.");

        defaultRatingTF.setText("1500");
        defaultRatingTF.setToolTipText("The Rating assigned to new players.");
        defaultRatingTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultRatingTFActionPerformed(evt);
            }
        });

        defaultRatingVolatilityTF.setText("0.06");
        defaultRatingVolatilityTF.setToolTipText("<html>The rating volatility assigned to new players.<br>\nThe volatility measure indicates the degree of expected<br>\nfluctuation in a player's rating. It is high when a player's<br>\nperformance is erratic, and low when it is consistent.</html>");

        jLabel6.setText("Glicko2 system constant:");
        jLabel6.setToolTipText("Constrains the change in volatility over time. Valid values range from 0.3 and 1.2");

        systemConstantTF.setText("0.5");
        systemConstantTF.setToolTipText("Constrains the change in volatility over time. Valid values range from 0.3 and 1.2");

        jLabel8.setText("Performance Variance:");
        jLabel8.setToolTipText("Performance variance around player skill. Used to tune matching.");

        performanceVarianceTF.setText("50");
        performanceVarianceTF.setToolTipText("Performance variance around player skill. Used to tune matching.");

        downweightCB.setSelected(true);
        downweightCB.setText("Down-weight results");
        downweightCB.setToolTipText("<html>\nDown-weight the results of multiplayer and team games<br>\nproportional to their size. This is intended to make the impact<br>\nof each game equivalent, regardless of the number of participants.\n</html>");
        downweightCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        downweightCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        downweightCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                downweightCBStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jLabel3)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(defaultRatingVolatilityTF)
                    .add(defaultRatingTF)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, defaultRatingDeviationTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .add(36, 36, 36)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(jLabel8))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(performanceVarianceTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(systemConstantTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(138, 138, 138))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(downweightCB)
                        .add(249, 249, 249))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(defaultRatingTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(systemConstantTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(defaultRatingDeviationTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(performanceVarianceTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(defaultRatingVolatilityTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(downweightCB))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));
        jTabbedPane1.setToolTipText("");
        numPlayersTF.setText("20");

        jLabel1.setText("Number of players in the system:");

        jLabel2.setText("Average number of games per period:");
        jLabel2.setToolTipText("<html>\nThe average number of head-to-head game results to post to the<br>\nranking system for each player during the period. Note that the<br>\nactual number of games played by each player may be less as<br>\nmultiplayer and team games contribute more head-to-head game results.\n</html>");

        aveNumGamesTF.setText("15");
        aveNumGamesTF.setToolTipText("<html>\nThe average number of head-to-head game results to post to the<br>\nranking system for each player during the period. Note that the<br>\nactual number of games played by each player may be less as<br>\nmultiplayer and team games contribute more head-to-head game results.\n</html>");
        aveNumGamesTF.setEnabled(false);

        jButton1.setText("Run");
        jButton1.setToolTipText("Run the similation with randomly generated game results.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Number of rating periods:");

        numPeriodsTF.setText("10");

        jLabel9.setText("Max. number of players per team:");
        jLabel9.setToolTipText("<html>\nThe maximum number of players that can play as a team in each game.<br>\nFor each game, teams of size 2 to this maximum will be formed.<br>\nIn all games, teams will have an equal number of players.<br>\nIf teams cannot be formed because the team size is not an even<br>\nmultiple of the number of players in the game, then a multiplayer<br>\ngame will be generated.\n<html>");

        maxPlayersPerTeamTF.setText("3");
        maxPlayersPerTeamTF.setToolTipText("<html>\nThe maximum number of players that can play as a team in each game.<br>\nFor each game, teams of size 2 to this maximum will be formed.<br>\nIn all games, teams will have an equal number of players.<br>\nIf teams cannot be formed because the team size is not an even<br>\nmultiple of the number of players in the game, then a multiplayer<br>\ngame will be generated.\n<html>");

        jLabel10.setText("Max. number of players per game:");

        maxPlayersPerGameTF.setText("6");

        jLabel11.setText("Update strategy:");

        updateStrategyButtonGroup.add(perSecondUpdateCB);
        perSecondUpdateCB.setText("update every");
        perSecondUpdateCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        perSecondUpdateCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        perSecondUpdateCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                perSecondUpdateCBStateChanged(evt);
            }
        });

        perSecondUpdateTF.setText("30");
        perSecondUpdateTF.setEnabled(false);

        secondsLabel.setText("seconds.");

        updateStrategyButtonGroup.add(perGameUpdateCB);
        perGameUpdateCB.setSelected(true);
        perGameUpdateCB.setText("update every");
        perGameUpdateCB.setToolTipText("<html>\nTrigger an update after the specified average number of head-to-head<br>\ngame results have been posted. Note that the actual number of games<br>\nplayed by each player may be less as multiplayer and team games<br>\ncontribute more head-to-head game results.\n</html>");
        perGameUpdateCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        perGameUpdateCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        perGameUpdateCB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                perGameUpdateCBStateChanged(evt);
            }
        });

        perGameUpdateTF.setText("15");
        perGameUpdateTF.setToolTipText("<html>\nTrigger an update after the specified average number of head-to-head<br>\ngame results have been posted. Note that the actual number of games<br>\nplayed by each player may be less as multiplayer and team games<br>\ncontribute more head-to-head game results.\n</html>");

        gamesLabel.setText("games.");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel10))
                        .add(32, 32, 32)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(maxPlayersPerGameTF)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, numPlayersTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                        .addContainerGap(273, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel9)
                            .add(jLabel7))
                        .add(35, 35, 35)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                                .add(numPeriodsTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(282, 282, 282))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                                .add(maxPlayersPerTeamTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(273, Short.MAX_VALUE))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                                .add(perSecondUpdateCB)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(perSecondUpdateTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(secondsLabel))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                                .add(perGameUpdateCB)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(perGameUpdateTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(gamesLabel))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                                .add(22, 22, 22)
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(aveNumGamesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(150, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jButton1)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(numPlayersTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(maxPlayersPerGameTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(maxPlayersPerTeamTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(numPeriodsTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(perSecondUpdateCB)
                    .add(perSecondUpdateTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(secondsLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(aveNumGamesTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(perGameUpdateCB)
                    .add(perGameUpdateTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(gamesLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 66, Short.MAX_VALUE)
                .add(jButton1)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Random", jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Players"));
        playersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Integer(1), new Double(1500.0), new Double(350.0), new Double(0.06)},
                {new Integer(2), new Double(1500.0), new Double(350.0), new Double(0.06)},
                {new Integer(3), new Double(1500.0), new Double(350.0), new Double(0.06)},
                {new Integer(4), new Double(1500.0), new Double(350.0), new Double(0.06)}
            },
            new String [] {
                "Player ID", "Rating", "Rating Deviation", "Rating Volatility"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playersTable.setTableHeader(null);
        jScrollPane1.setViewportView(playersTable);

        addPlayerButton.setText("Add");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });

        removePlayerButton.setText("Remove");
        removePlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePlayerButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 417, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addPlayerButton)
                    .add(removePlayerButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(addPlayerButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removePlayerButton))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Games"));
        gamesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Integer(1), new Integer(1), new Integer(1), new Double(10.0)},
                {new Integer(1), new Integer(1), new Integer(2), new Double(3.0)},
                {new Integer(1), new Integer(2), new Integer(3), new Double(7.0)},
                {new Integer(1), new Integer(2), new Integer(4), new Double(4.0)}
            },
            new String [] {
                "Game", "Team ID", "Player ID", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gamesTable);

        addGameButton.setText("Add");
        addGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGameButtonActionPerformed(evt);
            }
        });

        removeGameButton.setText("Remove");
        removeGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeGameButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 414, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addGameButton)
                    .add(removeGameButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(addGameButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeGameButton))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap())
        );

        runCustomSimulationButton.setText("Run");
        runCustomSimulationButton.setToolTipText("Run the similation using the specified inputs for one rating period.");
        runCustomSimulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCustomSimulationButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(runCustomSimulationButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, 0, 549, Short.MAX_VALUE)
                        .add(jPanel6)))
                .add(82, 82, 82))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runCustomSimulationButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jTabbedPane1.addTab("Custom", jPanel4);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 604, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 374, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("File");
        jMenuItem1.setText("Matching Calculator...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        fileMenu.add(jMenuItem1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, 0, 642, Short.MAX_VALUE)
                    .add(jPanel2))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 409, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downweightCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_downweightCBStateChanged
        System.setProperty("jrs.downweightResults", String.valueOf(downweightCB.isSelected()));
    }//GEN-LAST:event_downweightCBStateChanged

    private void perGameUpdateCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_perGameUpdateCBStateChanged
        JRadioButton source = (JRadioButton)evt.getSource();
        perGameUpdateTF.setEnabled(source.isSelected());
    }//GEN-LAST:event_perGameUpdateCBStateChanged

    private void perSecondUpdateCBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_perSecondUpdateCBStateChanged
        JRadioButton source = (JRadioButton)evt.getSource();
        perSecondUpdateTF.setEnabled(source.isSelected());
        aveNumGamesTF.setEnabled(source.isSelected());
    }//GEN-LAST:event_perSecondUpdateCBStateChanged

    private void removeGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeGameButtonActionPerformed
        int[] selectedRows = gamesTable.getSelectedRows();
        for (int i=0; i<selectedRows.length; i++) {
            ((DefaultTableModel)gamesTable.getModel()).removeRow(selectedRows[i]);
        }
        ((DefaultTableModel)gamesTable.getModel()).fireTableDataChanged();
    }//GEN-LAST:event_removeGameButtonActionPerformed

    private void removePlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePlayerButtonActionPerformed
        int[] selectedRows = playersTable.getSelectedRows();
        for (int i=0; i<selectedRows.length; i++) {
            ((DefaultTableModel)playersTable.getModel()).removeRow(selectedRows[i]);
        }
        ((DefaultTableModel)playersTable.getModel()).fireTableDataChanged();
    }//GEN-LAST:event_removePlayerButtonActionPerformed

    /** Run custom simulation */
    private void runCustomSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCustomSimulationButtonActionPerformed

        System.setProperty("jrs.defaultRating", defaultRatingTF.getText());
        System.setProperty("jrs.defaultRatingDeviation", defaultRatingDeviationTF.getText());
        System.setProperty("jrs.defaultRatingVolatility", defaultRatingVolatilityTF.getText());
        System.setProperty("jrs.glicko2SystemConstant", systemConstantTF.getText());
        System.setProperty("jrs.performanceVarianceAroundPlayerSkill", performanceVarianceTF.getText());
        
        RankingService rankingService = new RankingService();
        
        // Create the simulation report
        
        SimulationReport report = new SimulationReport(rankingService);
        
        // Register the players with the ranking system
        int numPlayers = playersTable.getRowCount();
        for (int row=0; row<numPlayers; row++) {
            Object playerId = playersTable.getValueAt(row, 0);
            double rating = Double.parseDouble(playersTable.getValueAt(row, 1).toString());
            double ratingDeviation = Double.parseDouble(playersTable.getValueAt(row, 2).toString());
            double ratingVolatility = Double.parseDouble(playersTable.getValueAt(row, 3).toString());
            PlayerRating playerRating = new PlayerRating(playerId, rating, ratingDeviation, ratingVolatility);
            rankingService.registerPlayer(playerId, playerRating);
            report.addPlayer(playerId);
        }

        // TO DO: Support more than one period?
        
        Integer periodId = new Integer(0);
        Iterator playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.addPeriod(playerId, periodId, rankingService.getPlayerRating(playerId), null);
        }
        
        // Generate the game results from the contents of the Games table
        
        HashMap gameResultsList = new HashMap();
        for (int row=0; row<gamesTable.getRowCount(); row++) {

            Object gameId = gamesTable.getValueAt(row, 0);
            Object teamId = gamesTable.getValueAt(row, 1);
            Object playerId = gamesTable.getValueAt(row, 2);
            double score = ((Double)gamesTable.getValueAt(row, 3)).doubleValue();

            GameResults gameResults = (GameResults)gameResultsList.get(gameId);
            if (gameResults == null) {
                gameResults = new GameResults();
                gameResultsList.put(gameId, gameResults);
            }
            gameResults.addPlayerResults(teamId, playerId, score);
        }
        
        // Post the results to the ranking service.
                
        Iterator gameResultsListIter = gameResultsList.keySet().iterator();
        while (gameResultsListIter.hasNext()) {
            Object gameId = gameResultsListIter.next();
            GameResults gameResults = (GameResults)gameResultsList.get(gameId);
            
            // For each player in the game, add a game node to their report
            Iterator gamePlayerIds = gameResults.getPlayers().iterator();
            while (gamePlayerIds.hasNext()) {
                Object gamePlayerId = gamePlayerIds.next();
                report.addGame(gamePlayerId, periodId, gameId, gameResults);
            }
            
            rankingService.postResults(gameResults);
        }
        rankingService.endPeriod();

//        periodReport.executionTime = RankingService.timeToComputeLatestPlayerRatings;
//        report.executionTime += periodReport.executionTime;

        // Get the new player ratings and add them to the report.
        playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.setPostPeriodRating(playerId, periodId, rankingService.getPlayerRating(playerId));
        }

        // Find the best matches for each player this period and add them
        // to the player's period report.
        playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.addMatch(playerId, periodId, rankingService.getMatches(playerId, 10));
        }
        
        SimulationResultsWindow resultsWindow = new SimulationResultsWindow(this, report);
        resultsWindow.setVisible(true);
    }//GEN-LAST:event_runCustomSimulationButtonActionPerformed

    /** Show the matching calculator.
      */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        MatchingCalculator mc = new MatchingCalculator(this, true);
        mc.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /** Add game */
    private void addGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGameButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel)gamesTable.getModel();
        Object[] rowData = {new Integer(1), new Integer(1), new Integer(1), new Double(0)};
        tableModel.addRow(rowData);
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_addGameButtonActionPerformed

    /** Add player */
    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel)playersTable.getModel();
        Object[] rowData = {new Integer(nextPlayerId++), 
                            new Double(defaultRatingTF.getText()), 
                            new Double(defaultRatingDeviationTF.getText()), 
                            new Double(defaultRatingVolatilityTF.getText())};
        tableModel.addRow(rowData);
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    private void defaultRatingTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultRatingTFActionPerformed
    }//GEN-LAST:event_defaultRatingTFActionPerformed

    /** Randomly generate and run a simulation.
      */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        System.setProperty("jrs.defaultRating", defaultRatingTF.getText());
        System.setProperty("jrs.defaultRatingDeviation", defaultRatingDeviationTF.getText());
        System.setProperty("jrs.defaultRatingVolatility", defaultRatingVolatilityTF.getText());
        System.setProperty("jrs.glicko2SystemConstant", systemConstantTF.getText());
        System.setProperty("jrs.performanceVarianceAroundPlayerSkill", performanceVarianceTF.getText());

        // Create an instance of the ranking service. The update strategy radio
        // buttons determine whether it is updated periodically or after an
        // average number of games.
        RankingService rankingService;
        if (perSecondUpdateCB.isSelected()) {
            int updatePeriod = Integer.parseInt(perSecondUpdateTF.getText());        
            rankingService = new TimerBasedRankingService(updatePeriod);
            rankingService.addListener(this);
        }
        else {
            rankingService = new ResultsBasedRankingService();
        }
        
        // Create the simulation report
        SimulationReport report = new SimulationReport(rankingService);
        reports.put(rankingService, report);

        // Register players in the system
        int numPlayers = Integer.parseInt(numPlayersTF.getText());
        for (int i=0; i<numPlayers; i++) {
            Object playerId = new Integer(i);
            rankingService.registerPlayer(playerId);
            report.addPlayer(playerId);
        }
        
        if (perSecondUpdateCB.isSelected()) {
            ((TimerBasedRankingService)rankingService).startUpdating();        
        }
        else {
            int numPeriods = Integer.parseInt(numPeriodsTF.getText());
            for (int j=0; j<numPeriods; j++) {
                doBeginRatingPeriod(rankingService, j);
                doEndRatingPeriod(rankingService, j);
            }
        }
        
        SimulationResultsWindow resultsWindow = new SimulationResultsWindow(this, report);
        resultsWindow.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Perform tasks at the beginning of a rating period.
      *
      * @param source 
      * @param ratingPeriodNumber 
      */
    public void beginRatingPeriod(RankingService source, int ratingPeriodNumber) {
        final RankingService rs = source;
        final int rpn = ratingPeriodNumber;
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    doBeginRatingPeriod(rs, rpn);
                }
            }
        );    
    }
    
    /** For each period, generate some random game results, then add them
      * to the simulation report.
      *
      * @param rankingService 
      * @param ratingPeriodNumber 
      */
    private void doBeginRatingPeriod(RankingService rankingService, int ratingPeriodNumber) {
        
        SimulationReport report = (SimulationReport)reports.get(rankingService);
        int numPlayers = rankingService.getPlayers().size();
        
        Integer periodId = new Integer(ratingPeriodNumber);

        Iterator playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.addPeriod(playerId, periodId, rankingService.getPlayerRating(playerId), null);
        }

        // Generate an average of aveGamesPerPeriod game results per player.
        // If the ranking service is configured to update after an average
        // number of games, then this number will be just enough to trigger
        // a rating period update.

        int aveGamesPerPeriod = Integer.parseInt(aveNumGamesTF.getText());
        System.setProperty("jrs.aveGamesPerPeriod", String.valueOf(aveGamesPerPeriod));
         
        int gameCount = 0;
        int numResultsThisPeriod = 0;
        while ((double)numResultsThisPeriod/numPlayers < aveGamesPerPeriod) {
            
            Integer gameId = new Integer(gameCount++);

            int maxPlayersPerGame = Math.max(Integer.parseInt(maxPlayersPerGameTF.getText()), 2);
            int numPlayersInGame = 2 + ((int)(Math.random() * (maxPlayersPerGame-2)));
            int maxPlayersPerTeam = Integer.parseInt(maxPlayersPerTeamTF.getText());
            int numTeams = 0;
            for (int numPlayersPerTeam=maxPlayersPerGame; numPlayersPerTeam>1; numPlayersPerTeam--) {
                if (numPlayersInGame % numPlayersPerTeam == 0) {
                    numTeams = numPlayersInGame/numPlayersPerTeam;
                    if (numTeams > 1) { // TO DO: && (int)(math.random() * 2) == 1  -- ie. 50% chance of doing this. that way,
                                        // chance of getting more teams than 2.
                        break;
                    }
                }
            }

            // Randomly select players to play in the game.
            List gamePlayers = getRandomPlayers(rankingService, numPlayersInGame);

            // Generate random results for each player in the game
            GameResults gameResults = new GameResults();
            int teamCount = 0;
            Iterator gamePlayerIds = gamePlayers.iterator();
            while (gamePlayerIds.hasNext()) {
                Object playerId = gamePlayerIds.next();
                double playerScore = (int)(Math.random() * numPlayersInGame * 10);
                if (numTeams < 2) {
                    gameResults.addPlayerResults(playerId, playerScore);
                }
                else {
                    Integer teamId = new Integer(teamCount);
                    gameResults.addPlayerResults(teamId, playerId, playerScore);
                    double teamResults = gameResults.getTeamResults(teamId);
                    gameResults.setTeamResults(teamId, teamResults+playerScore);
                    if (teamCount+1 < numTeams) {
                        teamCount++;
                    }
                    else {
                        teamCount = 0;
                    }
                }
            }

            // Add the game results to game list in the report of each player
            // in the game.
            gamePlayerIds = gamePlayers.iterator();
            while (gamePlayerIds.hasNext()) {
                Object playerId = gamePlayerIds.next();
                report.addGame(playerId, periodId, gameId, gameResults);
            }

            numResultsThisPeriod += countGlickoResultsPosted(gameResults);

            // Post the results to the ranking service.
            rankingService.postResults(gameResults);
        }
    }

    /** Randomly select the specified number of players from the list of players
      * registered with the ranking system.
      * 
      * @param rankingService 
      * @param numPlayers 
      * @return 
      *     A <code>List</code> of <code>Objects</code> representing player ids.
      */
    private List getRandomPlayers(RankingService rankingService, int numPlayers) {
        ArrayList playersInSystem = new ArrayList(rankingService.getPlayers());
        Collections.shuffle(playersInSystem);
        return playersInSystem.subList(0, numPlayers);
    }
    
    /** Calculate the number of head-to-head game results that will be posted
      * to the glicko2 algorithm. This number is used to determine the average
      * number of results posted for each player during a period, which should
      * be around 10-15 (but is specified by the jrs.aveGamesPerPeriod property)
      * 
      * @param gameResults 
      * @return 
      */
    private int countGlickoResultsPosted(GameResults gameResults) {
        int glickoResultsPosted = 0;
        if (gameResults.isTeamGame()) {
            // For each team
            Iterator teamIds = gameResults.getTeams().iterator();
            while (teamIds.hasNext()) {
                Object teamId = teamIds.next();
                // For each member of each team
                Iterator teamMemberIds = gameResults.getTeamMembers(teamId).iterator();
                while (teamMemberIds.hasNext()) {
                    Object teamMemberId = teamMemberIds.next();
                    // For each opposing team of the member
                    Iterator opposingTeamIds = gameResults.getTeams().iterator();
                    while (opposingTeamIds.hasNext()) {
                        Object opposingTeamId = opposingTeamIds.next();
                        if (!opposingTeamId.equals(teamId)) {
                            Iterator opposingTeamMemberIds = gameResults.getTeamMembers(opposingTeamId).iterator();
                            while (opposingTeamMemberIds.hasNext()) {
                                opposingTeamMemberIds.next();
                                glickoResultsPosted++;
                            }
                        }
                    }
                }
            }
        }
        else {
            Iterator playerIds = gameResults.getPlayers().iterator();
            while (playerIds.hasNext()) {
                Object playerId = playerIds.next();
                Iterator opponentIds = gameResults.getPlayers().iterator();
                while (opponentIds.hasNext()) {
                    Object opponentId = opponentIds.next();
                    if (!opponentId.equals(playerId)) {
                       glickoResultsPosted++;
                    }
                }
                
            }
        }
        return glickoResultsPosted;
    }
    
    /** Perform tasks at the end of a rating period.
      * 
      * @param source 
      * @param ratingPeriodNumber 
      */
    public void endRatingPeriod(RankingService source, int ratingPeriodNumber) {
        final RankingService rs = source;
        final int rpn = ratingPeriodNumber;
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    doEndRatingPeriod(rs, rpn);
                }
            }
        );    
    }
    
    /** Get the post-period ratings of each player and update the report.
      * 
      * @param rankingService 
      * @param ratingPeriodNumber 
      */
    private void doEndRatingPeriod(RankingService rankingService, int ratingPeriodNumber) {
        
        SimulationReport report = (SimulationReport)reports.get(rankingService);
        int numPlayers = rankingService.getPlayers().size();
        
        Integer periodId = new Integer(ratingPeriodNumber);

        // Get the new player ratings and add them to the report.
        Iterator playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.setPostPeriodRating(playerId, periodId, rankingService.getPlayerRating(playerId));
        }

        // Find the best matches for each player this period and add them
        // to the player's period report.
        playerIds = rankingService.getPlayers().iterator();
        while (playerIds.hasNext()) {
            Object playerId = playerIds.next();
            report.addMatch(playerId, periodId, rankingService.getMatches(playerId, 10));
        }        
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** The main entry point for the application.
      *
      * @param args 
      *     The command line arguments. Currently, none are supported.
      */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RankingServiceAnalyzer().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addGameButton;
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JTextField aveNumGamesTF;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JTextField defaultRatingDeviationTF;
    private javax.swing.JTextField defaultRatingTF;
    private javax.swing.JTextField defaultRatingVolatilityTF;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JCheckBox downweightCB;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel gamesLabel;
    private javax.swing.JTable gamesTable;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField maxPlayersPerGameTF;
    private javax.swing.JTextField maxPlayersPerTeamTF;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField numPeriodsTF;
    private javax.swing.JTextField numPlayersTF;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JRadioButton perGameUpdateCB;
    private javax.swing.JTextField perGameUpdateTF;
    private javax.swing.JRadioButton perSecondUpdateCB;
    private javax.swing.JTextField perSecondUpdateTF;
    private javax.swing.JTextField performanceVarianceTF;
    private javax.swing.JTable playersTable;
    private javax.swing.JButton removeGameButton;
    private javax.swing.JButton removePlayerButton;
    private javax.swing.JButton runCustomSimulationButton;
    private javax.swing.JLabel secondsLabel;
    private javax.swing.JTextField systemConstantTF;
    private javax.swing.ButtonGroup updateStrategyButtonGroup;
    // End of variables declaration//GEN-END:variables
    
}
