/*
 * LeaderBoardPanel.java
 *
 */

package rps.client;

import rps.common.*;
import rps.common.GameState.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  Derek Hilder
 */
public class LeaderBoardPanel extends JPanel {
    
    private RPSClient rpsClient;
    private PollingThread pollingThread;
    
    /** 
     */
    public LeaderBoardPanel(RPSClient client) {

        this.rpsClient = client;
        
        initComponents();
        playerRatingsList.setModel(new DefaultListModel());

    }
    
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (visible) {
            if (pollingThread == null) {
                pollingThread = new PollingThread(this);
                pollingThread.start();
            }
        }
        else {
            if ((pollingThread != null) && pollingThread.isAlive()) {
                pollingThread.pollingFinished = true;
                try {
                    pollingThread.join();
                    pollingThread = null;
                } 
                catch (InterruptedException ie) {
                    ie.printStackTrace();
                }
            }
        }
    }
    
    /**
     * 
     * 
     * 
     * @param playerRatings
     *     Set of RPSPlayerRating objects.
     */
    private void updatePlayerRatingsList(Set playerRatings) {
        
        DefaultListModel listModel = (DefaultListModel)playerRatingsList.getModel();
        listModel.clear();
        Iterator playerRatingsIter = playerRatings.iterator();
        while (playerRatingsIter.hasNext()) {
            RPSPlayerRating playerRating = (RPSPlayerRating)playerRatingsIter.next();
            String listItemText = 
                "<html><table width=300><tr><td>" + playerRating.getPlayerId() +
                "</td><td>" + RPSApplet.rf.format(playerRating.getRating()) + " +/- " +
                RPSApplet.rdf.format(playerRating.getRatingDeviation()) + 
                "</td></tr></table></html>";
            listModel.addElement(listItemText);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel3 = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        playerRatingsList = new javax.swing.JList();
        leaderBoardLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(450, 500));
        setPreferredSize(new java.awt.Dimension(450, 500));
        jLabel3.setFont(new java.awt.Font("Palatino", 3, 36));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Rock, Paper, Scissors");

        closeButton.setText("Close");
        closeButton.setName("joinButton");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        playerRatingsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html><table width=300><tr><td width=\"50%\">Player1</td><td>1500 +/-350</td></tr></table></html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        playerRatingsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(playerRatingsList);

        leaderBoardLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leaderBoardLabel.setText("Leader Board");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 410, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(leaderBoardLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(196, Short.MAX_VALUE)
                .add(closeButton)
                .add(179, 179, 179))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(leaderBoardLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 351, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(closeButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((CardLayout)getParent().getLayout()).show(getParent(), rpsClient.popPanel());
    }//GEN-LAST:event_closeButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leaderBoardLabel;
    private javax.swing.JList playerRatingsList;
    // End of variables declaration//GEN-END:variables
    
    // ================================================================================
    // PollingThread class
    
    private static class PollingThread extends Thread {
        
        private LeaderBoardPanel owner;
        boolean pollingFinished;
        
        public PollingThread(LeaderBoardPanel owner) {
            this.owner = owner;
        }
        
        public void run() {
            pollingFinished = false;
            while (!pollingFinished) {
                try {
                    LeaderBoardRequest leaderBoardRequest = new LeaderBoardRequest();
                    LeaderBoardResponse leaderBoardResponse = 
                        (LeaderBoardResponse)owner.rpsClient.sendMessage(leaderBoardRequest);
                    final Set playerRatings = leaderBoardResponse.getPlayerRatings();
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            owner.updatePlayerRatingsList(playerRatings);
                        }
                    });
                    Thread.sleep(3 * 1000);
                }
                catch (Exception e) {
                    // TO DO: This is thrown by sendMessage(). What do we do?
                    // Put up a dialog? Should we stop polling?
                    e.printStackTrace();
                }
            }
        }
    }
    
}
