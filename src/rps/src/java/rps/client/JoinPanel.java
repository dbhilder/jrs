/*
 * JoinPanel.java
 *
 */

package rps.client;

import rps.common.*;
import rps.common.GameState.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  Derek Hilder
 */
public class JoinPanel extends JPanel implements RPSClientListener {
    
    private RPSClient rpsClient;
    private PollingThread pollingThread;
    
    /** Creates new form JoinPanel */
    public JoinPanel(RPSClient client) {

        this.rpsClient = client;
        rpsClient.addListener(this);
        
        initComponents();
        gatheringGamesList.setModel(new DefaultListModel());
    }
    
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (visible) {
            // TO DO: Get the player's rating and append it after their id
            playerRatingLabel.setText(rpsClient.getUserId());
            startPolling();
        }
        else {
            stopPolling();
        }
    }
    
    public void appletDestroyed() {
        stopPolling();
    }
    
    private void startPolling() {
        if (pollingThread == null) {
            pollingThread = new PollingThread(this);
            pollingThread.start();
        }
    }
    
    private void stopPolling() {
        if ((pollingThread != null) && pollingThread.isAlive()) {
            pollingThread.pollingFinished = true;
            try {
                pollingThread.join();
                pollingThread = null;
            } 
            catch (InterruptedException ie) {
                ie.printStackTrace();
            }
        }
    }
    
    /**
     * 
     * 
     * @param gatheringGames
     *     Set of GameState objects (or GameMatch objects?)
     */
    private void updateGatheringGamesList(Set gatheringGames) {
        Object selectedValue = gatheringGamesList.getSelectedValue();
        DefaultListModel listModel = (DefaultListModel)gatheringGamesList.getModel();
        listModel.clear();
        Iterator gatheringGamesIter = gatheringGames.iterator();
        while (gatheringGamesIter.hasNext()) {
            GameState gatheringGame = (GameState)gatheringGamesIter.next();
            listModel.addElement(gatheringGame);
        }
        if ((selectedValue != null) && listModel.contains(selectedValue)) {
            gatheringGamesList.setSelectedValue(selectedValue, true);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel3 = new javax.swing.JLabel();
        joinButton = new javax.swing.JButton();
        gatherButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        gatheringGamesList = new javax.swing.JList();
        playerRatingLabel = new javax.swing.JLabel();
        leaderboardButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(450, 500));
        setPreferredSize(new java.awt.Dimension(450, 500));
        jLabel3.setFont(new java.awt.Font("Palatino", 3, 36));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Rock, Paper, Scissors");

        joinButton.setText("Join");
        joinButton.setName("joinButton");
        joinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinButtonActionPerformed(evt);
            }
        });

        gatherButton.setText("Gather");
        gatherButton.setName("gatherButton");
        gatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gatherButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(441, 700));
        gatheringGamesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html><b>Game One</b> (ave. rating: 1500 +/- 350)<br><font size=-2>max. players: 4, games ends after 5 minutes</font><br><i>Players:</i><table><tr><td>Player1 (1500+/-350)</td><td>Player2 (1500+/-350)</td><td>Player3 (1500+/-350)</td></tr><tr><td>Player4 (1500+/-350)</td></tr></html>", "<html><b>Game Two</b> (ave. rating: 1500 +/- 350)<br><font size=-2>max. players: 4, games ends after 5 minutes</font><br><i>Players:</i><table><tr><td>Player1 (1500+/-350)</td><td>Player2 (1500+/-350)</td><td>Player3 (1500+/-350)</td></tr><tr><td>Player4 (1500+/-350)</td></tr></html>", "<html><b>Game Three</b> (ave. rating: 1500 +/- 350)<br><font size=-2>max. players: 4, games ends after 5 minutes</font><br><i>Players:</i><table><tr><td>Player1 (1500+/-350)</td><td>Player2 (1500+/-350)</td><td>Player3 (1500+/-350)</td></tr><tr><td>Player4 (1500+/-350)</td></tr></html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        gatheringGamesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(gatheringGamesList);

        playerRatingLabel.setText("Player4: 1500 +/- 350");

        leaderboardButton.setText("Leader Board");
        leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaderboardButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 410, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(playerRatingLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 160, Short.MAX_VALUE)
                                .add(leaderboardButton))))
                    .add(layout.createSequentialGroup()
                        .add(137, 137, 137)
                        .add(joinButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gatherButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(playerRatingLabel)
                    .add(leaderboardButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(joinButton)
                    .add(gatherButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void leaderboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaderboardButtonActionPerformed
        rpsClient.pushPanel("JoinPanel");
        ((CardLayout)getParent().getLayout()).show(getParent(), "LeaderBoardPanel");
    }//GEN-LAST:event_leaderboardButtonActionPerformed

    private void gatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gatherButtonActionPerformed
        ((CardLayout)getParent().getLayout()).show(getParent(), "GameSetupPanel");
    }//GEN-LAST:event_gatherButtonActionPerformed

    private void joinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinButtonActionPerformed
        GameState selectedGame = (GameState)gatheringGamesList.getSelectedValue();
        String teamName = null;
        if (selectedGame.isTeamGame()) {
            HashSet teamNames = new HashSet();
            Iterator teams = selectedGame.getTeams().iterator();
            while (teams.hasNext()) {
                Team team = (Team)teams.next();
                if (!team.isFull()) {
                    teamNames.add(team.getName());
                }
            }
            String[] teamNamesArray = (String[])teamNames.toArray(new String[0]);
            teamName = (String)JOptionPane.showInputDialog(this, 
                                                           "Select a team:", 
                                                           "Select Team", 
                                                           JOptionPane.PLAIN_MESSAGE,
                                                           null,
                                                           teamNamesArray, 
                                                           teamNamesArray[0]);
        }
        JoinRequest joinRequest = new JoinRequest(rpsClient.getUserId(), selectedGame.getTitle(), teamName);
        try {
            JoinResponse joinResponse = 
                (JoinResponse)rpsClient.sendMessage(joinRequest);
            if (joinResponse.getResultCode() == JoinResponse.PLAYER_JOINED) {
                rpsClient.setCurrentGame(selectedGame);
                // TO DO: show game panel with message requesting player to wait.
                // Start thread to periodically send GameInfoRequests to server
                // and check response for game where phase =  running, then
                // start game
                ((CardLayout)getParent().getLayout()).show(getParent(), "GamePanel");
            }
            else {
                // TO DO: report an error (game full, team full, etc)
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_joinButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gatherButton;
    private javax.swing.JList gatheringGamesList;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinButton;
    private javax.swing.JButton leaderboardButton;
    private javax.swing.JLabel playerRatingLabel;
    // End of variables declaration//GEN-END:variables
    
    // ================================================================================
    // PollingThread class
    
    private static class PollingThread extends Thread {
        
        private JoinPanel owner;
        boolean pollingFinished;
        
        public PollingThread(JoinPanel owner) {
            this.owner = owner;
        }
        
        public void run() {
            pollingFinished = false;
            while (!pollingFinished) {
                try {
                    GatheringGamesRequest gatheringGamesRequest = new GatheringGamesRequest(owner.rpsClient.getUserId());
                    GatheringGamesResponse gatheringGamesResponse = 
                        (GatheringGamesResponse)owner.rpsClient.sendMessage(gatheringGamesRequest);
                    final LinkedHashSet gatheringGames = gatheringGamesResponse.getGatheringGames();
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            owner.updateGatheringGamesList(gatheringGames);
                        }
                    });
                    Thread.sleep(3 * 1000);
                }
                catch (Exception e) {
                    // TO DO: This is thrown by sendMessage(). What do we do?
                    // Put up a dialog? Should we stop polling?
                    e.printStackTrace();
                }
            }
        }
    }
}
