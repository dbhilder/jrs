/*
 * JoinPanel.java
 *
 */

package rps.client;

import rps.common.*;
import rps.common.GameState.*;
import java.awt.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author  Derek Hilder
 */
public class GatherPanel extends JPanel implements RPSClientListener {
    
    private RPSClient rpsClient;
    private PollingThread pollingThread;
    
    /** Creates new form JoinPanel */
    public GatherPanel(RPSClient client) {
        
        rpsClient = client;
        rpsClient.addListener(this);
        
        initComponents();
        gatheredPlayersList.setModel(new DefaultListModel());
    }
    
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (visible) {
            startPolling();
        }
        else {
            stopPolling();
        }
    }
    
    public void appletDestroyed() {
        stopPolling();
    }
    
    private void startPolling() {
        if (pollingThread == null) {
            pollingThread = new PollingThread(this);
            pollingThread.start();
        }
    }
    
    private void stopPolling() {
        if ((pollingThread != null) && pollingThread.isAlive()) {
            pollingThread.pollingFinished = true;
            try {
                pollingThread.join();
                pollingThread = null;
            } 
            catch (InterruptedException ie) {
                ie.printStackTrace();
            }
        }
    }
    
    public void updateGameInfo() {

        gatheredPlayersList.setModel(new DefaultListModel());
        
        GameState gatheringGame = rpsClient.getCurrentGame();
        if (gatheringGame != null) {
            
            gameTitleLabel.setText(gatheringGame.getTitle());
            maxPlayersLabel.setText(String.valueOf(gatheringGame.getMaxPlayers()));
            numTeamsLabel.setText(String.valueOf(gatheringGame.getNumTeams()));
            int endGameLimit = gatheringGame.getEndGameLimit();
            switch (gatheringGame.getGameType()) {
                case GameState.HANDS:
                    gameTypeLabel.setText("after " + endGameLimit + " hands.");
                    break;
                case GameState.TIMED:
                    gameTypeLabel.setText("after " + endGameLimit + " minutes.");
                    break;
                case GameState.POINTS:
                    gameTypeLabel.setText("after " + endGameLimit + " points.");
                    break;
            }
            
            Iterator gatheredPlayers = gatheringGame.getPlayers().iterator();
            while (gatheredPlayers.hasNext()) {
                Player gatheredPlayer = (Player)gatheredPlayers.next();
                String playerText = String.valueOf(gatheredPlayer.getPlayerId()) + " (" +
                    RPSApplet.rf.format(gatheredPlayer.getRating()) + " +/- " +
                    RPSApplet.rdf.format(gatheredPlayer.getRatingDeviation()) +
                    " )";
                ((DefaultListModel)gatheredPlayersList.getModel()).addElement(playerText);
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel3 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        gatherButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        gatheredPlayersList = new javax.swing.JList();
        playerRatingLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        gameTitleLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxPlayersLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        numTeamsLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        gameTypeLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(450, 500));
        setPreferredSize(new java.awt.Dimension(450, 500));
        jLabel3.setFont(new java.awt.Font("Palatino", 3, 36));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Rock, Paper, Scissors");

        cancelButton.setText("Cancel");
        cancelButton.setName("joinButton");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gatherButton.setText("Gather");
        gatherButton.setName("gatherButton");
        gatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gatherButtonActionPerformed(evt);
            }
        });

        gatheredPlayersList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(gatheredPlayersList);

        playerRatingLabel.setText("Title:");

        jLabel1.setText("<html><b><i>Game Details:</i></b></html>");

        jLabel2.setText("<html><b><i>Gathered Players:</i></b></html>");

        jLabel5.setText("Max. Players:");

        jLabel7.setText("Num. Teams:");

        jLabel9.setText("Game Type:");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(139, 139, 139)
                        .add(gatherButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(24, 24, 24)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel5)
                                    .add(playerRatingLabel)
                                    .add(jLabel7)
                                    .add(jLabel9))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, gameTypeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .add(gameTitleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, numTeamsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(maxPlayersLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))))
                            .add(jLabel1))
                        .add(163, 163, 163)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .add(25, 25, 25)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(gameTitleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, playerRatingLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(maxPlayersLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(numTeamsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(gameTypeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(13, 13, 13)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(gatherButton)
                    .add(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void gatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gatherButtonActionPerformed
        String gameTitle = rpsClient.getCurrentGameTitle();
        StartGameRequest startGameRequest = new StartGameRequest(gameTitle);
        try {
            StartGameResponse startGameResponse = (StartGameResponse)rpsClient.sendMessage(startGameRequest);
            if (startGameResponse.getResultCode() == StartGameResponse.SUCCESSFUL) {
                ((CardLayout)getParent().getLayout()).show(getParent(), "GamePanel");
            }
            else {
                // TO DO: Report an error
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_gatherButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ((CardLayout)getParent().getLayout()).show(getParent(), "JoinPanel");
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel gameTitleLabel;
    private javax.swing.JLabel gameTypeLabel;
    private javax.swing.JButton gatherButton;
    private javax.swing.JList gatheredPlayersList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maxPlayersLabel;
    private javax.swing.JLabel numTeamsLabel;
    private javax.swing.JLabel playerRatingLabel;
    // End of variables declaration//GEN-END:variables
    
    
    // ================================================================================
    // PollingThread class
    
    private static class PollingThread extends Thread {
        
        private GatherPanel owner;
        boolean pollingFinished;
        
        public PollingThread(GatherPanel owner) {
            this.owner = owner;
        }
        
        public void run() {
            pollingFinished = false;
            while (!pollingFinished) {
                try {
                    GameState currentGame = owner.rpsClient.getCurrentGame();
                    if ((currentGame != null) && (currentGame.getGamePhase() == GameState.GATHERING)) {
                        String gameTitle = currentGame.getTitle();
                        GameStateRequest gameStateRequest = new GameStateRequest(gameTitle);
                        GameStateResponse gameStateResponse = (GameStateResponse)owner.rpsClient.sendMessage(gameStateRequest);
                        
                        // TO DO: Is this necessary still? Not thread safe...
                        owner.rpsClient.setCurrentGame(gameStateResponse.getGameInfo());
                        
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                owner.updateGameInfo();
                            }
                        });
                    }
                    Thread.sleep(3 * 1000);
                }
                catch (Exception e) {
                    // TO DO: This is thrown by sendMessage(). What do we do?
                    // Put up a dialog? Should we stop polling?
                    e.printStackTrace();
                }
            }
        }
    }
}
